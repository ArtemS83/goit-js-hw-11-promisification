{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","callback","map","user","promiseToggleUserState","updatedUsers","logger2","table"],"mappings":"yLASMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAQjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,EAAUC,GAK3CA,EAJqBF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,OAM3DC,EAAyB,SAACL,EAAUC,GACxC,IAAMK,EAAeN,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE/D,OAAO,IAAIhB,SAAQ,SAAAC,GACjBA,EAAQiB,OAINC,EAAU,SAAAD,GAAY,OAAIb,QAAQe,MAAMF,IAK9CP,EAAgBH,EAAO,QAASW,GAChCR,EAAgBH,EAAO,MAAOW,GAK9BF,EAAuBT,EAAO,SAASD,KAAKY,GAC5CF,EAAuBT,EAAO,OAAOD,KAAKY,K","file":"main.29e7225a616d15d7aa48.js","sourcesContent":["import './styles.css';\n\n//==================Задание 1================//\n\n// Напиши функцию delay(ms), которая возвращает промис,\n// переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд,\n// которое передали во время вызова функции delay.\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n//==================Задание 2====================//\n\n// Перепиши функцию toggleUserState() так,\n// чтобы она не использовала callback - функцию callback,\n// а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName, callback) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n\n  callback(updatedUsers);\n};\n\nconst promiseToggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n  return new Promise(resolve => {\n    resolve(updatedUsers);\n  });\n};\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\ntoggleUserState(users, 'Mango', logger2);\ntoggleUserState(users, 'Lux', logger2);\n\n/*\n * Должно работать так\n */\npromiseToggleUserState(users, 'Mango').then(logger2);\npromiseToggleUserState(users, 'Lux').then(logger2);\n// promiseToggleUserState(users, 'Poly').then(console.table); // так тоже можно\n"],"sourceRoot":""}