{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","promiseToggleUserState","allUsers","userName","updatedUsers","map","user","logger2","table","promiseMakeTransaction","transaction","min","max","delayPromise","Math","floor","random","reject","data","id","logSuccess","logError","warn","amount","catch"],"mappings":"yLASMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAQjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAWnBC,EAAyB,SAACC,EAAUC,GACxC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE/D,OAAO,IAAIhB,SAAQ,SAAAC,GACjBA,EAAQa,OAING,EAAU,SAAAH,GAAY,OAAIT,QAAQa,MAAMJ,IAW9CH,EAAuBH,EAAO,SAASD,KAAKU,GAC5CN,EAAuBH,EAAO,OAAOD,KAAKU,GAS1C,IAMME,EAAyB,SAAAC,GAC7B,IAPiCC,EAAKC,EAOhCC,GAP2BF,EAOc,IAPTC,EAOc,IAN7CE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAOpD,OAAO,IAAIrB,SAAQ,SAACC,EAAS0B,GAC3BzB,YAAW,WAET,GADmBsB,KAAKE,SAAW,GACnB,CACd,IAAME,EAAO,CAAEC,GAAIT,EAAYS,GAAIzB,KAAMmB,GACzCtB,EAAQ2B,QAERD,EAAO,CAAEE,GAAIT,EAAYS,OAE1BN,OAIDO,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAIzB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BuB,EAA3B,iBAA8CzB,EAA9C,QAGI2B,EAAW,SAAC,GAAW,IAATF,EAAS,EAATA,GAClBxB,QAAQ2B,KAAR,gCAA6CH,EAA7C,8BAGFV,EAAuB,CAAEU,GAAI,GAAII,OAAQ,MACtC1B,KAAKuB,GACLI,MAAMH,GAETZ,EAAuB,CAAEU,GAAI,GAAII,OAAQ,MACtC1B,KAAKuB,GACLI,MAAMH,GAETZ,EAAuB,CAAEU,GAAI,GAAII,OAAQ,KAAM1B,KAAKuB,GAAYI,MAAMH,GAEtEZ,EAAuB,CAAEU,GAAI,GAAII,OAAQ,MACtC1B,KAAKuB,GACLI,MAAMH,K","file":"main.9104dfefd2346e4bcca1.js","sourcesContent":["import './styles.css';\n\n//================== ЗАДАНИЕ 1 ================//\n\n// Напиши функцию delay(ms), которая возвращает промис,\n// переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во миллисекунд,\n// которое передали во время вызова функции delay.\n\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n//================== ЗАДАНИЕ 2 ====================//\n\n// Перепиши функцию toggleUserState() так,\n// чтобы она не использовала callback - функцию callback,\n// а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   callback(updatedUsers);\n// };\n\nconst promiseToggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n  return new Promise(resolve => {\n    resolve(updatedUsers);\n  });\n};\n\nconst logger2 = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger2);\n// toggleUserState(users, 'Lux', logger2);\n\n/*\n * Должно работать так\n */\npromiseToggleUserState(users, 'Mango').then(logger2);\npromiseToggleUserState(users, 'Lux').then(logger2);\n// promiseToggleUserState(users, 'Poly').then(console.table); // так тоже можно\n\n//================= ЗАДАНИЕ 3 ====================//\n\n// Перепиши функцию makeTransaction() так, чтобы она не использовала\n// callback - функции onSuccess и onError,\n// а принимала всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n/*\n * Должно работать так\n */\nconst promiseMakeTransaction = transaction => {\n  const delayPromise = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      if (canProcess) {\n        const data = { id: transaction.id, time: delayPromise };\n        resolve(data);\n      } else {\n        reject({ id: transaction.id });\n      }\n    }, delayPromise);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = ({ id }) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\npromiseMakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\npromiseMakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\npromiseMakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\npromiseMakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n/*\n * Работает так\n */\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n/*\n * Работает так\n */\n// const logSuccess = (id, time) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n"],"sourceRoot":""}